// Author: Jake Rieger
// Created: 5/15/24.
//

#include <AssetMetadata.h>
#include <catch2/catch_test_macros.hpp>

using namespace AssetTool;

constexpr size_t compSize   = 499999;
constexpr size_t origSize   = 999999;
constexpr u32 manifestCount = 4;
constexpr char checksum[]   = "40aa1b203c9d8ee150b21c3c7cda8261492e5420c5f2b9f7380700e094c303b4"
                              "8e62f319c1da0e32eb40d113c5f1749cc61aeb499167890ab82f2cc9bb706971";

TEST_CASE("Metadata.Create", "[XEN-AssetTool]") {
    AssetMetadata metadata;
    metadata.m_Checksum       = checksum;
    metadata.m_CompressedSize = compSize;
    metadata.m_OriginalSize   = origSize;
    metadata.m_ManifestCount  = manifestCount;

    REQUIRE(metadata.m_Checksum == checksum);
    REQUIRE(metadata.m_CompressedSize == compSize);
    REQUIRE(metadata.m_OriginalSize == origSize);
    REQUIRE(metadata.m_ManifestCount == manifestCount);
}

TEST_CASE("Metadata.Serialize", "[XEN-AssetTool]") {
    AssetMetadata metadata;
    metadata.m_Checksum       = checksum;
    metadata.m_CompressedSize = compSize;
    metadata.m_OriginalSize   = origSize;
    metadata.m_ManifestCount  = manifestCount;

    const ByteArray bytes = metadata.Serialize();
    REQUIRE(bytes.size() == META_SIZE);
}

TEST_CASE("Metadata.Deserialize", "[XEN-AssetTool]") {
    ByteArray bytes = {
      0x34, 0x30, 0x61, 0x61, 0x31, 0x62, 0x32, 0x30, 0x33, 0x63, 0x39, 0x64, 0x38, 0x65, 0x65,
      0x31, 0x35, 0x30, 0x62, 0x32, 0x31, 0x63, 0x33, 0x63, 0x37, 0x63, 0x64, 0x61, 0x38, 0x32,
      0x36, 0x31, 0x34, 0x39, 0x32, 0x65, 0x35, 0x34, 0x32, 0x30, 0x63, 0x35, 0x66, 0x32, 0x62,
      0x39, 0x66, 0x37, 0x33, 0x38, 0x30, 0x37, 0x30, 0x30, 0x65, 0x30, 0x39, 0x34, 0x63, 0x33,
      0x30, 0x33, 0x62, 0x34, 0x38, 0x65, 0x36, 0x32, 0x66, 0x33, 0x31, 0x39, 0x63, 0x31, 0x64,
      0x61, 0x30, 0x65, 0x33, 0x32, 0x65, 0x62, 0x34, 0x30, 0x64, 0x31, 0x31, 0x33, 0x63, 0x35,
      0x66, 0x31, 0x37, 0x34, 0x39, 0x63, 0x63, 0x36, 0x31, 0x61, 0x65, 0x62, 0x34, 0x39, 0x39,
      0x31, 0x36, 0x37, 0x38, 0x39, 0x30, 0x61, 0x62, 0x38, 0x32, 0x66, 0x32, 0x63, 0x63, 0x39,
      0x62, 0x62, 0x37, 0x30, 0x36, 0x39, 0x37, 0x31, 0x3f, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x1f, 0xa1, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00};

    AssetMetadata metadata = AssetMetadata::Deserialize(bytes);
    REQUIRE(metadata.m_Checksum == checksum);
    REQUIRE(metadata.m_CompressedSize == compSize);
    REQUIRE(metadata.m_OriginalSize == origSize);
    REQUIRE(metadata.m_ManifestCount == manifestCount);
}